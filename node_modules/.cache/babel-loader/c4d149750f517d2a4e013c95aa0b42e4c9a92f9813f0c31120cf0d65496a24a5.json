{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n  async getUserInfo() {\n    const res = await fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //загрузка инфы о пользователе\n\n  async getInitialCards() {\n    const res = await fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //загрузка данных карточек\n\n  async setUserInfoApi(userData) {\n    const res = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //редактирование профиля\n\n  async setUserAvatarApi(userData) {\n    const res = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userData.avatar\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //новый аватар\n\n  async addNewCard(newData, isUser) {\n    const res = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newData.name,\n        link: newData.link,\n        isUser: isUser\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //добавление новой карточки\n\n  async setLikeCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //лайк карточки\n\n  async removeLikeCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //снятие лайка\n\n  async deleteCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  } //удаление карточки\n\n  getStartData() {\n    return Promise.all([this.getUserInfo(), this.getInitialCards()]);\n  } //стартовые значения инфо и карточек\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-65\",\n  headers: {\n    authorization: \"7c8da599-6aba-41f7-81de-e4912bb02751\",\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","getUserInfo","res","fetch","method","ok","Promise","reject","status","json","getInitialCards","setUserInfoApi","userData","body","JSON","stringify","name","about","setUserAvatarApi","avatar","addNewCard","newData","isUser","link","setLikeCard","cardId","removeLikeCard","deleteCard","getStartData","all","api","authorization"],"sources":["/Users/varvaranamar/Desktop/praktikum/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  async getUserInfo() {\n    const res = await fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//загрузка инфы о пользователе\n\n  async getInitialCards() {\n    const res = await fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//загрузка данных карточек\n\n  async setUserInfoApi(userData) {\n    const res = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//редактирование профиля\n\n  async setUserAvatarApi(userData) {\n    const res = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userData.avatar\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//новый аватар\n\n  async addNewCard(newData, isUser) {\n    const res = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newData.name,\n        link: newData.link,\n        isUser: isUser,\n      })\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//добавление новой карточки\n\n  async setLikeCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//лайк карточки\n\n  async removeLikeCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//снятие лайка\n\n  async deleteCard(cardId) {\n    const res = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      return await Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }//удаление карточки\n\n  getStartData() {\n    return Promise.all([this.getUserInfo(), this.getInitialCards()])\n  }//стартовые значения инфо и карточек\n}\n\nconst api = new Api({\n\turl: \"https://mesto.nomoreparties.co/v1/cohort-65\",\n\theaders: {\n\t\tauthorization: \"7c8da599-6aba-41f7-81de-e4912bb02751\",\n\t\t'Content-Type': 'application/json'\n\t}\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}